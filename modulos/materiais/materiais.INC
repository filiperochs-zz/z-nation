stock const Float: SA_MateriaisSpawns[][3] = {
	{984.13745, -304.70602, 62.35364},
    {957.40808, -345.46851, 62.35364},
    {880.97858, -383.12436, 62.35364},
    {964.30469, -426.77841, 62.35364},
    {883.29230, -332.52899, 62.35364},
    {818.03931, -53.40134, 80.00844},
    {760.26416, -17.92657, 43.60862},
    {668.76837, -112.61050, 43.60862},
    {868.35065, 261.44016, 43.60862},
    {840.36493, 20.28256, 80.00844},
    {648.48871, 24.06280, 43.60862},
    {703.23749, 170.35155, 43.60862},
    {192.67006, -974.60565, 41.48559},
    {147.20229, -729.41162, 41.48559},
    {187.80197, -525.70117, 41.48559},
    {179.65317, -817.04974, 41.48559},
    {269.89319, -721.22931, 41.48559},
    {42.19404, -780.58813, 41.48559},
    {108.73915, -618.88751, 41.48559},
    {-377.46237, -952.75018, 55.85661},
    {-350.55157, -963.81165, 55.85661},
    {-386.36105, -998.18970, 55.85661},
    {-1168.21912, -907.08624, 133.77478},
    {-593.95917, -882.16296, 105.69697},
    {-658.44177, -825.91760, 105.69697},
    {-701.84674, -913.36902, 133.61612},
    {-547.73663, -868.50201, 103.22579},
    {-660.37518, -684.68359, 103.22579},
    {-841.51624, -740.08807, 162.21498},
    {-748.65698, -819.69147, 162.21498},
    {-853.86493, -894.99786, 162.21498},
    {-1036.26514, -850.22760, 133.77478},
    {-1034.37988, -897.82550, 133.77478},
    {-1119.40942, -847.64453, 133.77478},
    {-960.19037, -1257.21021, 136.62498},
    {-930.08453, -1196.73096, 128.15469},
    {-977.86584, -1147.32959, 128.15469},
    {-1021.33990, -1215.75024, 128.15469},
    {-951.48785, -1286.38965, 140.74998},
    {-592.44940, -1211.22241, 15.42240},
    {-601.16229, -1387.63391, 15.42240},
    {-640.54193, -1460.48889, 15.42240},
    {-629.53003, -1372.56665, 15.42240},
    {-627.90875, -1313.83130, 15.42240},
    {-541.57404, -1406.60132, 15.42240},
    {-814.87653, -1380.35291, 109.50385},
    {-530.00116, -1810.96130, 21.61298},
    {-461.82272, -1713.86743, 21.61298},
    {-399.30420, -1802.53357, 21.61298},
    {-528.79974, -1710.92273, 21.61298},
    {-479.31580, -1772.24133, 21.61298},
    {-406.44904, -1629.54614, 21.61298},
    {-330.85693, -2091.93286, 73.33513},
    {-442.45996, -2068.57813, 73.33513},
    {-370.30328, -2030.70251, 73.33513},
    {-398.08124, -2127.70508, 73.33513},
    {-517.84021, -2057.41235, 73.33513},
    {-540.29230, -1936.03308, 73.33513},
    {-353.76669, -1984.49817, 73.33513},
    {-524.94244, -2182.24683, 55.03450},
    {-707.27808, -2191.40308, 25.77468},
    {-749.21643, -2162.44678, 30.71453},
    {-973.93597, -2290.32349, 59.45602},
    {-1003.21588, -2510.23340, 79.86454},
    {-1089.31531, -2244.13428, 38.16025},
    {-589.97565, -2130.84155, 61.24256},
    {-818.71344, -2311.59546, 30.32102},
    {-1106.23462, -2526.89624, 61.41272},
    {-1384.88232, -2432.61230, 33.74128},
    {-1511.78687, -2557.93262, 59.62476},
    {-1381.74976, -2533.63623, 48.56126},
    {-1564.19470, -2589.86011, 40.37561},
    {-1645.64758, -2453.64795, 96.47588},
    {-1702.64807, -2392.08545, 100.20502},
    {-1840.11194, -2261.47290, 62.86980},
    {-1830.82068, -2052.98755, 63.96178},
    {-1980.09558, -2027.17981, 77.99052},
    {-1916.06079, -2088.77295, 88.90309},
    {-2117.57324, -2142.27295, 49.37759},
    {-2182.11670, -2211.43213, 35.35007},
    {-1642.46484, -1849.86816, 81.16164},
    {-1559.33044, -1815.95251, 62.97875},
    {-1477.58862, -1858.33215, 61.56646},
    {-1626.60840, -1333.70215, 48.56434},
    {-1625.19189, -1287.06458, 55.41352},
    {-1524.72961, -1273.21240, 87.78642},
    {-1561.23193, -1395.47498, 46.55097},
    {-1707.87976, -1146.50220, 68.13725},
    {-1648.98010, -1113.31030, 95.82854},
    {-1773.61938, -976.03577, 70.62825},
    {-1735.44775, -1090.83301, 70.90177},
    {-1662.52991, -846.94757, 93.77281},
    {-2308.34180, -499.28467, 80.21315},
    {-2377.78809, -520.04163, 113.09026},
    {-2286.11157, -448.31839, 80.41735},
    {-2416.67383, -688.30945, 132.00769},
    {-2398.16089, -486.01273, 102.33564},
    {-2340.04614, -361.68640, 67.43867},
    {-2429.48511, -724.37134, 132.06607},
    {-2394.29858, -680.49023, 132.08447},
    {-2527.32739, -419.12698, 68.33913},
    {-2298.01611, 2793.84741, 154.42677},
    {-2401.59888, 2761.66187, 144.01186},
    {-2306.05713, 2735.94482, 94.52131},
    {-2213.17969, 2682.55444, 120.50656},
    {-2133.95850, 2622.73438, 145.57787},
    {-2079.29785, 2687.11963, 161.81854},
    {-2216.01953, 2620.97046, 93.60995},
    {-2228.60229, 2741.40625, 131.05637},
    {-2528.82910, 2736.24707, 104.02504},
    {-2773.31030, 2620.59106, 113.19255},
    {-2761.35645, 2732.37134, 178.11264},
    {-2623.20068, 2710.49463, 89.88995},
    {-2786.60474, 2590.37134, 105.72358},
    {-2831.17896, 2490.26538, 129.25703},
    {-2795.55103, 2471.73511, 104.04552},
    {-2811.20630, 2372.24927, 110.71093},
    {-2797.78979, 2221.90991, 106.50455},
    {-2857.84277, 2201.14258, 173.85254},
    {-1840.98511, 2442.21216, 79.76759},
    {-1743.12915, 2570.28711, 103.30804},
    {-1949.46790, 2575.68726, 46.34597},
    {1768.30640, -307.26166, 81.53566},
    {1775.08240, -192.83302, 80.67082},
    {1767.70471, -144.15285, 71.76485},
    {1819.10620, 25.78155, 25.06839},
    {1738.65759, 45.68985, 26.76050},
    {1792.55493, -378.67310, 83.75168},
    {1804.45691, -561.55981, 72.10269},
    {1761.32385, -725.79791, 56.41705},
    {1863.20862, -677.62103, 96.54378},
    {1804.80994, -631.81927, 80.68786},
    {1894.32324, -731.81830, 109.27711},
    {1918.73059, -723.43463, 115.11129},
    {1980.68738, -717.83917, 122.21358},
    {1969.40955, -761.21729, 127.75114},
    {2056.83203, -759.90906, 116.02639},
    {2082.47388, -700.96429, 99.89335},
    {2142.25171, -839.20465, 93.01765},
    {2092.72876, -879.42560, 102.53803},
    {2215.26172, -938.77661, 75.63414},
    {2314.26587, -995.56549, 60.55169},
    {2306.99438, -764.34589, 129.47728},
    {2359.79883, -768.66620, 129.15866},
    {2328.56470, -686.84259, 132.17235},
    {2541.39966, -909.50879, 84.60345},
    {2600.86401, -818.46753, 77.14053},
    {2455.51758, -620.30017, 118.01439},
    {2557.93506, -448.19870, 82.92451},
    {2455.17871, -419.63202, 72.69837},
    {2720.34912, -595.81366, 64.67979},
    {2723.55127, -945.88696, 65.82684},
    {2609.27808, -925.22003, 78.49957},
    {2589.46655, -330.20367, 57.24674},
    {2650.05249, -198.88640, 36.98194},
    {2522.75195, -171.98222, 36.49138},
    {2678.18750, -92.60740, 46.28102},
    {2366.46265, -140.52979, 26.20874},
    {2500.51465, -98.85351, 36.57110},
    {2667.13281, 142.61575, 43.02971},
    {2584.08838, 133.36406, 31.45669},
    {2655.42798, 98.28516, 35.37317},
    {2628.50317, 205.52838, 57.90503},
    {2521.11475, 241.48166, 50.95195},
    {2666.88843, 241.04417, 55.40505},
    {2496.91040, 247.07153, 40.31922},
    {2405.80103, 203.01750, 26.11917},
    {2262.69287, 266.52231, 17.12531},
    {2306.88354, 230.65752, 23.41618},
    {2368.77075, 366.54181, 25.94566},
    {2461.59082, 360.64496, 28.57590},
    {2545.46802, 339.49948, 24.30997},
    {2586.39844, 257.91901, 50.96227},
    {2036.10754, 132.78487, 25.74140},
    {2044.76013, 211.18921, 20.70263},
    {1989.16797, 261.76657, 27.91453},
    {1947.62341, 260.11893, 28.15742},
    {1516.40808, 303.50427, 17.32980},
    {1459.09949, 257.80542, 18.14957},
    {1228.14758, 431.55231, 13.64533},
    {1550.25684, 208.43906, 22.55407},
    {1584.39282, 155.90498, 25.16739},
    {1513.11780, 58.71889, 32.35192},
    {1109.01904, -26.79695, 71.53570},
    {1058.94849, 32.88507, 74.16692},
    {1071.83350, -15.98126, 78.65155},
    {1058.96545, -59.83912, 84.95606},
    {986.18433, -54.15243, 79.01550},
    {969.73462, -35.96028, 81.53951},
    {924.26410, 10.10785, 86.73113},
    {794.40027, 11.93266, 64.67954},
    {823.70129, 54.62477, 80.30651},
    {585.02405, 5.28760, 17.25443},
    {-71.63009, -2600.00903, 73.82640},
    {-108.68286, -2635.42041, 72.10757},
    {-56.43409, -2669.64380, 78.01138},
    {-107.03156, -2683.65674, 74.96919},
    {-97.11844, -2735.64258, 68.18269},
    {35.72892, -2683.29736, 39.61269},
    {-826.65472, -2574.66089, 86.89040},
    {-879.49634, -2615.58350, 95.49635},
    {-916.11340, -2732.73633, 118.10487},
    {-843.67480, -2644.78247, 95.08601},
    {-959.74280, -2809.06592, 90.89188},
    {-743.93695, -2686.73389, 85.57111},
    {-952.18750, -2428.92505, 82.60776},
    {-996.65881, -2402.22437, 69.90281},
    {-933.58423, -2496.07080, 103.10184},
    {-1062.50830, -2353.57422, 52.05116},
    {-892.59027, -2211.49951, 31.16387},
    {-763.84576, -2378.53442, 54.39426},
    {-643.97101, -2091.83472, 27.63937},
    {-676.99420, -2127.29297, 25.50654},
    {-600.85754, -2015.90820, 41.58717},
    {-748.95941, -2081.92554, 9.96264},
    {1119.90161, -570.64154, 103.85341},
    {1269.43335, -663.87885, 102.76366},
    {1380.29541, -739.03113, 97.04019},
    {1327.25696, -754.22131, 92.23566},
    {1439.37158, -741.40833, 84.42393},
    {1471.36755, -588.12323, 88.18590},
    {1391.60168, -541.42157, 75.25201},
    {1522.90295, -507.00729, 55.04380},
    {1596.09045, -519.28735, 57.70707},
    {1561.72925, -398.71829, 47.78762},
    {1627.80420, -420.58826, 53.31243},
    {1466.46692, -389.36493, 40.40813},
    {1559.64771, -673.39722, 81.99481},
    {1627.71655, -665.09656, 61.57240},
    {1562.09583, -627.61487, 77.99895},
    {-156.27100, -1551.72424, 3.64736},
    {-122.25778, -1538.36450, 1.74902},
    {-127.01386, -1505.60876, 2.79972},
    {21.57238, -1488.94019, 6.37362},
    {-23.38138, -1450.00256, 5.13984},
    {-30.13572, -1479.32727, 3.57224},
    {-104.57163, -1332.39185, 1.95325},
    {-112.62652, -1365.74524, 1.34800},
    {-80.56766, -1339.91541, 2.38488},
    {-31.14342, -1265.64294, 6.02348},
    {-63.96119, -1265.88782, 3.63665},
    {37.47453, -1183.03992, 5.21905},
    {-2.24688, -1215.29199, 8.01897},
    {-27.13445, -1306.17786, 1.29571},
    {-158.58235, -1190.41602, 3.68293},
    {-226.01361, -1225.16736, 6.61782},
    {-203.65712, -1154.53467, 5.55281},
    {-283.01236, -1257.71252, 3.72148},
    {-349.25110, -1155.99805, 65.04541},
    {-110.58250, -1070.44165, 9.04945},
    {149.22935, -856.83386, 21.43228},
    {-333.70578, -907.49170, 50.70150},
    {-830.58887, -1327.59106, 102.63359},
    {-791.14154, -1492.57532, 124.46244},
    {-888.96313, -1374.78296, 125.24497},
    {-946.06061, -1451.90125, 124.16734},
    {-767.17181, -1222.05396, 53.09079},
    {-967.74426, -1107.02441, 128.16850},
    {-970.98798, -1345.42273, 146.86250},
    {-963.93744, -1225.70776, 128.45836},
    {-930.27557, -912.58844, 128.47850},
    {-782.84039, -811.87390, 148.40886},
    {-818.68384, -749.12537, 154.80939},
    {-598.29675, -942.58118, 98.64049},
    {-574.74414, -597.54828, 19.16813},
    {-547.76563, -441.02005, 31.92953},
    {-688.79504, -531.04761, 35.34847},
    {-434.51569, -495.15411, 22.30406},
    {-1023.10645, -231.12895, -0.06384},
    {-1001.92108, -544.95117, 30.75966},
    {-1325.06616, -937.62640, 191.47116},
    {-1383.05676, -1078.41272, 161.05769},
    {-1432.89758, -916.74243, 200.46103},
    {-1291.07129, -1059.79114, 170.10435},
    {-1425.26208, -1007.64850, 179.76965},
    {-1284.50964, -964.78094, 177.95900},
    {-1406.05432, -924.69434, 196.37027},
    {-1292.94214, -1113.36609, 170.74431},
    {-1439.44006, -1061.47388, 167.54675},
    {-1251.69324, -971.11206, 164.76616},
    {-1332.46973, -986.61005, 190.69135},
    {-1576.75049, -1065.16931, 130.90724},
    {-2091.86401, -606.71490, 38.48061},
    {-2189.77026, -662.90979, 55.97131},
    {-2083.05884, -670.90656, 44.23314},
    {-2376.59180, -851.03412, 29.76930},
    {-2304.74683, -806.33051, 70.58718},
    {-2184.08984, -908.48041, 42.53170},
    {-1856.32153, -1987.08997, 84.99474},
    {-1886.86292, -2269.37744, 60.85231},
    {-1843.98816, -2128.35889, 65.10469},
    {-1676.00684, -2392.28174, 98.11039},
    {-1589.02698, -2470.63745, 88.56480},
    {-1411.16565, -2289.94214, 32.73592},
    {-1413.73340, -2468.63867, 41.78239},
    {-1695.72339, -2362.35693, 94.21998},
    {-1443.85449, -2580.57617, 65.72478},
    {-1382.64087, -2739.41919, 85.93612},
    {-1471.84106, -2746.57495, 59.73649},
    {-1430.97644, -2681.33691, 61.89581},
    {-1399.47473, -2830.25586, 61.97862},
    {-1292.55554, -2798.99829, 67.82019},
    {-1247.02026, -2742.45874, 48.19065},
    {-1234.74255, -2818.01685, 59.70479},
    {-1041.42371, -2774.91455, 110.21000},
    {-982.06769, -2756.44653, 110.81889},
    {-676.17206, -2699.24902, 99.55869},
    {-607.33301, -2653.65161, 130.99541},
    {-587.44073, -2769.20215, 118.57862},
    {-455.53354, -2467.83057, 115.21189},
    {-409.24841, -2594.35693, 143.00633},
    {-151.04504, -2662.11768, 64.41147},
    {-367.09076, -2638.44336, 138.28647},
    {-150.35139, -2789.20093, 45.43057},
    {-395.27264, 105.78143, 17.26173},
    {-490.81360, 97.74061, 25.48300},
    {-574.12018, 218.83408, 16.25010},
    {-40.75579, 156.19600, 9.12164},
    {-605.36316, 85.99081, 39.11086},
    {-458.64725, 40.91830, 43.06951},
    {-581.92072, 41.42657, 53.39180},
    {-563.29657, -145.12375, 70.57285},
    {2601.82715, -39.23906, 39.50932},
    {2651.35669, 183.45563, 51.26514},
    {-444.24307, 147.32205, 15.66962},
    {-532.80328, 140.98032, 15.66962},
    {-373.62747, 2.42149, 36.83043},
    {-451.29669, -135.47847, 70.57285},
    {-327.15356, 206.16733, 9.40487},
    {-228.92754, 260.94226, 9.12164},
    {-130.41466, 237.77661, 9.12164},
    {112.07084, 115.79663, 9.12164},
    {139.62317, 47.86598, 9.12164},
    {88.43076, -42.49620, 9.12164},
    {-36.95935, -12.87409, 9.12164},
    {40.92319, 78.81476, 9.12164},
    {88.59790, 29.66722, 9.12164},
    {-27.44894, -144.21858, 9.12164},
    {52.19953, -166.94974, 9.12164},
    {-159.28160, -133.45828, 9.12164},
    {-252.37891, -104.48960, 9.12164},
    {-242.57831, 9.87249, 9.12164},
    {-168.74408, 7.26410, 9.12164},
    {-220.58638, -74.66029, 9.12164},
    {-214.46680, 63.70154, 9.12164},
    {-115.63923, 61.70835, 9.12164},
    {-183.68848, 144.03580, 9.12164},
    {-312.13562, -1302.40161, 8.99832},
    {-352.41501, -1405.55334, 18.42309},
    {-278.84299, -1398.07922, 18.42309},
    {-241.86414, -1298.73206, 18.42309},
    {-232.14227, -1127.06653, 18.42309},
    {-3.31718, -1042.87390, 22.81698},
    {-4.26478, -982.14209, 22.81698},
    {-75.41163, -974.39081, 22.81698},
    {-178.68906, -910.32916, 22.81698},
    {-257.13535, -854.83063, 39.07801},
    {-287.38757, -949.47076, 42.07552},
    {-184.59549, -1003.71466, 42.07552},
    {-75.00813, -849.02960, 42.07552},
    {-528.74536, -1544.73669, 21.61298},
    {-624.98743, -1614.88098, 21.61298},
    {-407.82297, -1556.59900, 21.61298},
    {-803.00269, -1583.41821, 109.50385},
    {-856.57941, -1648.75806, 109.50385},
    {-898.94965, -1433.10938, 109.50385},
    {1477.61548, 198.08432, 20.40542},
    {1426.29639, 74.36707, 20.40542},
    {1351.72510, 39.99004, 20.40542},
    {1275.32935, 60.03642, 20.40542},
    {1286.93738, 118.16090, 20.40542},
    {1371.93591, 96.00602, 20.40542},
    {1399.83142, 149.82137, 20.40542},
    {1496.67139, 0.13508, 20.40542},
    {1420.64514, -90.01002, 20.40542},
    {1488.60571, -71.89925, 20.40542},
    {1556.11633, 331.94977, 17.81254},
    {1566.98206, 410.92609, 17.81254},
    {1509.82532, 435.84921, 17.81254},
    {1423.85217, 446.52176, 17.81254},
    {1380.77759, 493.43802, 13.64533},
    {1257.87390, 457.31146, 13.64533},
    {1192.19141, 399.93201, 13.64533},
    {1157.27368, 497.90521, 13.64533},
    {1046.54590, 311.15775, 13.64533},
    {1181.42688, 320.07742, 13.64533},
    {1092.81604, 359.50504, 13.64533},
    {958.92078, 336.15427, 13.64533},
    {1048.90100, 234.81187, 13.64533},
    {1074.26416, 264.80939, 13.64533},
    {984.67377, 248.79085, 13.64533},
    {911.89685, 177.86470, 43.60862},
    {801.77551, 268.14212, 43.60862},
    {922.24866, 310.16266, 43.60862},
    {-2479.84814, 2774.05688, 150.84412},
    {-2436.05322, 2739.51196, 150.84412},
    {-2340.45972, 2788.62134, 150.84412},
    {-2626.79614, 2791.97388, 169.35686},
    {-2750.98438, 2713.93481, 169.35686},
    {-2824.19849, 2268.29077, 110.71093},
    {-2845.98950, 2358.15454, 110.71093},
    {-2350.61450, -607.80963, 127.26647},
    {-2317.74951, -561.50854, 127.26647},
    {-2260.32788, -511.32108, 127.26647},
    {-1852.16089, -1899.79932, 88.90309},
    {-1690.59399, -2013.95520, 88.90309},
    {-1578.56458, -2031.55786, 88.90309},
    {-1654.93799, -1950.70447, 88.90309},
    {-1784.06055, -2102.59644, 88.90309},
    {-1765.92456, -2215.30493, 88.90309},
    {-1893.78223, -2190.95190, 88.90309},
    {-1514.43933, -2429.07251, 34.19695},
    {-1598.13843, -2287.18579, 34.19695},
    {-1474.10010, -2410.55396, 34.19695},
    {-144.87282, -2542.98047, 36.23381},
    {-241.55452, -2457.90576, 36.23381},
    {-462.61801, -2419.20142, 112.90184},
    {-397.20947, -2409.41333, 112.90184},
    {-312.37222, -2439.41455, 112.90184},
    {-367.00449, -2532.52734, 112.90184},
    {-575.35645, -1273.04626, 15.42240},
    {-576.60931, -1348.22839, 15.42240},
    {-488.25339, -1368.87427, 15.42240},
    {-404.12415, -1299.34436, 15.42240},
    {-496.76910, -1301.89709, 15.42240},
    {-416.45447, -1373.31787, 15.42240}
};

enum {
	MATERIAL_TYPE_MADEIRA,
	MATERIAL_TYPE_ROCHA,
	MATERIAL_TYPE_METAL,
}

enum enumMateriais {
	matType,
	matObjectId,
	Text3D:matTextLabel,
	matHealth,
	matCountCut,
}

new MateriaisInfo[sizeof (SA_MateriaisSpawns)][enumMateriais];
new Iterator:iterMaterial<500>;

stock loadServerMateriaisCollect() {

	for(new index; index < sizeof(SA_MateriaisSpawns); index++) {
	
	    new
	        Float: x = SA_MateriaisSpawns[index][0],
	        Float: y = SA_MateriaisSpawns[index][1],
	        Float: z = SA_MateriaisSpawns[index][2],
			Float: a;
	        
		#pragma unused a
	        
		CA_RayCastLine(x, y, z + 50.0, x, y, z - 500.0, x, y, z);
	
	    SA_MateriaisSpawns[index][0] = x;
	    SA_MateriaisSpawns[index][1] = y;
	    SA_MateriaisSpawns[index][2] = z;
	
	    new rdon = random(10);
	    
	    Iter_Add(iterMaterial, index);
	    
	    if (rdon < 6) {
	        MateriaisInfo[index][matType] = MATERIAL_TYPE_MADEIRA;
	        MateriaisInfo[index][matHealth] = 60 + random(25);
	        MateriaisInfo[index][matCountCut] = 1 + random(5);
	        MateriaisInfo[index][matObjectId] = CreateDynamicObject(getServerMaterialModel(MATERIAL_TYPE_MADEIRA), x, y, z, 0.0, 0.0, frandom(360.0));
	        MateriaisInfo[index][matTextLabel]= CreateDynamic3DTextLabel("Madeira\nAperte 'F' para cortar", 0xFFFFFFF6, x, y, z + 1.0, 7.0);
	    }
	    else if (rdon < 9) {
            MateriaisInfo[index][matType] = MATERIAL_TYPE_ROCHA;
	        MateriaisInfo[index][matHealth] = 25 + random(20);
	        MateriaisInfo[index][matCountCut] = 3 + random(7);
            MateriaisInfo[index][matObjectId] = CreateDynamicObject(getServerMaterialModel(MATERIAL_TYPE_ROCHA), x, y, z, 0.0, 0.0, frandom(360.0));
            MateriaisInfo[index][matTextLabel]= CreateDynamic3DTextLabel("Pedra\nAperte 'F' para minerar", 0xFFFFFFF6, x, y, z + 0.5, 7.0);
	    } else {
	        MateriaisInfo[index][matType] = MATERIAL_TYPE_METAL;
	        MateriaisInfo[index][matHealth] = 15 + random(10);
	        MateriaisInfo[index][matCountCut] = 5 + random(11);
	        MateriaisInfo[index][matObjectId] = CreateDynamicObject(getServerMaterialModel(MATERIAL_TYPE_METAL), x, y, z, 0.0, 0.0, frandom(360.0));
	        MateriaisInfo[index][matTextLabel]= CreateDynamic3DTextLabel("Metal\nAperte 'F' para minerar", 0xFFFFFFF6, x, y, z + 0.5, 7.0);
	       	SetDynamicObjectMaterial(MateriaisInfo[index][matObjectId], 2, 1676, "wshxrefpump", "metalic128");
	    }
	}
}

stock getServerMaterialModel(type) {
	switch (type) {
	    case MATERIAL_TYPE_MADEIRA: return 655;
	    case MATERIAL_TYPE_ROCHA:   return 747;
		case MATERIAL_TYPE_METAL:   return 747;
	}
	return 0;
}

public OnPlayerKeyStateChange(playerid, newkeys, oldkeys) {

	if ((newkeys & 16) && GetPlayerState(playerid) == PLAYER_STATE_ONFOOT) {
	
		if (GetTickCount() > GetPVarInt(playerid, "lastCut")) {
		
		    foreach(new index : iterMaterial) {
		    
		        if (IsPlayerInRangeOfPoint(playerid, MateriaisInfo[index][matType] == MATERIAL_TYPE_MADEIRA ? (2.0) : (2.6), SA_MateriaisSpawns[index][0], SA_MateriaisSpawns[index][1], SA_MateriaisSpawns[index][2])) {
		        
		            new weaponid = GetPlayerWeapon(playerid);
		        
		            if (MateriaisInfo[index][matType] == MATERIAL_TYPE_MADEIRA) {
		            
		                if (weaponid == 8 || weaponid == 9) {
		                    SetPlayerFaceToPoint(playerid, SA_MateriaisSpawns[index][0], SA_MateriaisSpawns[index][1]);
		                    StartPlayerProgress(playerid, "Cortando...", 80,  20.0);
		                    SetPVarInt(playerid, "lastCut", GetTickCount() + 1100);
		                    ApplyAnimation(playerid, "BASEBALL","Bat_1", 4.1, 0, 1, 1, 0, 0);
		                    //Play3DSound(50, SA_MateriaisSpawns[index][0], SA_MateriaisSpawns[index][1], SA_MateriaisSpawns[index][2], 50.0);
		                    SetTimerEx("delayAction", 300, false, "ddd", playerid, index, 50);
		                    SetWeaponHealth(playerid, weaponid, GetWeaponHealth(playerid, weaponid) - 0.09);
		                } else {
		                    SendLanguageMessage(playerid, corError, "MSG_105");
		                }
		            } else if (MateriaisInfo[index][matType] == MATERIAL_TYPE_ROCHA){
		                if (weaponid == 5) {
		                	SetPlayerFaceToPoint(playerid, SA_MateriaisSpawns[index][0], SA_MateriaisSpawns[index][1]);
                            StartPlayerProgress(playerid, "Martelando...", 80,  20.0);
                            SetPVarInt(playerid, "lastCut", GetTickCount() + 1100);
                            ApplyAnimation(playerid, "BASEBALL","Bat_4", 4.1, 0, 1, 1, 0, 0);
                            //Play3DSound(51, SA_MateriaisSpawns[index][0], SA_MateriaisSpawns[index][1], SA_MateriaisSpawns[index][2], 50.0);
                            SetTimerEx("delayAction", 300, false, "ddd", playerid, index, 51);
                            SetWeaponHealth(playerid, weaponid, GetWeaponHealth(playerid, weaponid) - 0.09);
		                } else {
		                    SendLanguageMessage(playerid, corError, "MSG_106");
		                }
		            } else if (MateriaisInfo[index][matType] == MATERIAL_TYPE_METAL){
		                if (weaponid == 5) {
		                	SetPlayerFaceToPoint(playerid, SA_MateriaisSpawns[index][0], SA_MateriaisSpawns[index][1]);
                            StartPlayerProgress(playerid, "Martelando...", 80,  20.0);
                            SetPVarInt(playerid, "lastCut", GetTickCount() + 1100);
                            ApplyAnimation(playerid, "BASEBALL","Bat_4", 4.1, 0, 1, 1, 0, 0);
                            //Play3DSound(51, SA_MateriaisSpawns[index][0], SA_MateriaisSpawns[index][1], SA_MateriaisSpawns[index][2], 50.0);
                            SetTimerEx("delayAction", 300, false, "ddd", playerid, index, 51);
                            SetWeaponHealth(playerid, weaponid, GetWeaponHealth(playerid, weaponid) - 0.09);
		                } else {
		                    SendLanguageMessage(playerid, corError, "MSG_106");
		                }
		            }
		        
		            break;
		        }
		    }
		}
	}
 	#if defined mOnPlayerKeyStateChange
  		return mOnPlayerKeyStateChange(playerid, newkeys, oldkeys);
	#else
 		return 1;
	#endif
}
#if defined _ALS_OnPlayerKeyStateChange
	#undef OnPlayerKeyStateChange
#else
	#define _ALS_OnPlayerKeyStateChange
#endif
#define OnPlayerKeyStateChange mOnPlayerKeyStateChange
#if defined mOnPlayerKeyStateChange
	forward mOnPlayerKeyStateChange(playerid, newkeys, oldkeys);
#endif

callback delayedSound(playerid, audioid)
	return Audio_Play(playerid, audioid);

callback delayAction(playerid, index, audioid) {

    MateriaisInfo[index][matCountCut] --;
    
    givePlayerPoints(playerid, 30, .point_3d = 0);

	if (MateriaisInfo[index][matCountCut] < 1) {
	
	    new
	        quantiaSpawn,
	        Float: x = SA_MateriaisSpawns[index][0],
	        Float: y = SA_MateriaisSpawns[index][1],
	        Float: z = SA_MateriaisSpawns[index][2],
			string[45];

		z += 20.0;

		#pragma unused x, y, z

		switch(MateriaisInfo[index][matType]) {

		    case MATERIAL_TYPE_MADEIRA: {
                MateriaisInfo[index][matCountCut] = 1 + random(5);
                
                quantiaSpawn = 5 + random(15);
                
                if (quantiaSpawn > MateriaisInfo[index][matHealth])
                    quantiaSpawn = MateriaisInfo[index][matHealth];
                    
      			//createDroppedItem(x, y, z, "Madeira", ITEM_TYPE_MADEIRA, 19793, quantiaSpawn);
      			
      			if (!AddQuantiaItem(playerid, ITEM_TYPE_MADEIRA, quantiaSpawn))
      			{
      			    if (!isInventoryFreeSpace(playerid))
      			    {
      			    	createDroppedItem(x, y, z, "Madeira", ITEM_TYPE_MADEIRA, 19793, quantiaSpawn);
					} else {
					    givePlayerItem(playerid, ITEM_TYPE_MADEIRA, 19793, quantiaSpawn, "Madeira");
					}
      			}
                    
				format(string, sizeof string, "+%d madeiras", quantiaSpawn);
				SendServerMessageToPlayer(playerid, string);
                    
				MateriaisInfo[index][matHealth] -= quantiaSpawn;
		    }
		    case MATERIAL_TYPE_ROCHA: {
                MateriaisInfo[index][matCountCut] = 3 + random(7);
                
                quantiaSpawn = 3 + random(10);
                
                if (quantiaSpawn > MateriaisInfo[index][matHealth])
                    quantiaSpawn = MateriaisInfo[index][matHealth];

                //createDroppedItem(x, y, z, "Rocha", ITEM_TYPE_ROCHA, 1575, quantiaSpawn);
                
      			if (!AddQuantiaItem(playerid, ITEM_TYPE_ROCHA, quantiaSpawn))
      			{
      			    if (!isInventoryFreeSpace(playerid))
      			    {
      			    	createDroppedItem(x, y, z, "Rocha", ITEM_TYPE_ROCHA, 1575, quantiaSpawn);
					} else {
					    givePlayerItem(playerid, ITEM_TYPE_ROCHA, 1575, quantiaSpawn, "Rocha");
					}
      			}

				format(string, sizeof string, "+%d rochas", quantiaSpawn);
				SendServerMessageToPlayer(playerid, string);

                MateriaisInfo[index][matHealth] -= quantiaSpawn;
		    }
		    case MATERIAL_TYPE_METAL: {
                MateriaisInfo[index][matCountCut] = 5 + random(11);
                
                quantiaSpawn = 1 + random(7);

                if (quantiaSpawn > MateriaisInfo[index][matHealth])
                    quantiaSpawn = MateriaisInfo[index][matHealth];

                //createDroppedItem(x, y, z, "Metal", ITEM_TYPE_METAL, 1579, quantiaSpawn);
                
      			if (!AddQuantiaItem(playerid, ITEM_TYPE_METAL, quantiaSpawn))
      			{
      			    if (!isInventoryFreeSpace(playerid))
      			    {
      			    	createDroppedItem(x, y, z, "Metal", ITEM_TYPE_METAL, 1579, quantiaSpawn);
					} else {
					    givePlayerItem(playerid, ITEM_TYPE_METAL, 1579, quantiaSpawn, "Metal");
					}
      			}

				format(string, sizeof string, "+%d metais", quantiaSpawn);
				SendServerMessageToPlayer(playerid, string);

                MateriaisInfo[index][matHealth] -= quantiaSpawn;
		    }
		}
		
		checkPlayerConquista(playerid, Conquista_Coletando);
		
		if (MateriaisInfo[index][matHealth] < 1) {
		    Iter_Remove(iterMaterial, index);
		    //DestroyDynamicObject(MateriaisInfo[index][matObjectId]);
		    DestroyDynamic3DTextLabel(MateriaisInfo[index][matTextLabel]);
		    givePlayerPoints(playerid, 300, .point_3d = 0);
		    if (MateriaisInfo[index][matType] == MATERIAL_TYPE_MADEIRA) {
		        GetDynamicObjectPos(MateriaisInfo[index][matObjectId], x, y, z);
		    	MoveDynamicObject(MateriaisInfo[index][matObjectId], x, y + 0.1, z + 0.5, 2.0, 80.0, 0.0, 0.0);
		    	SetTimerEx("destroyDelayObj", 5000, false, "d", MateriaisInfo[index][matObjectId]);
			} else {
			    DestroyDynamicObject(MateriaisInfo[index][matObjectId]);
			}
		} else {
		    givePlayerPoints(playerid, 80, .point_3d = 0);
		}
	}

	// Play 3d sound
	if (GetPlayerWeapon(playerid) != 9)
	{
    	Play3DSound(audioid, SA_MateriaisSpawns[index][0], SA_MateriaisSpawns[index][1], SA_MateriaisSpawns[index][2], 50.0);
	}
}


callback destroyDelayObj(obj)
	return DestroyDynamicObject(obj);

















